// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?

  cards     Card[]
  decks     Deck[]
  todos     Todo[]
  categories Category[]

  @@map("users")
}

model Category {
  id      Int    @id @default(autoincrement())
  name    String
  color   String?
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  createdAt DateTime @default(now())
  
  todos   Todo[]

  @@unique([name, userId])
  @@map("categories")
}

model Todo {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  priority    Priority   @default(MEDIUM)
  status      TodoStatus @default(NOT_STARTED)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int

  @@map("todos")
}

model Deck {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  cards       Card[]

  @@map("decks")
}

model Card {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  hint      String?
  difficulty Difficulty @default(MEDIUM)
  reviewCount Int     @default(0)
  lastReviewed DateTime?
  nextReview   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId    Int

  @@map("cards")
}

enum TodoStatus {
  NOT_STARTED
  PENDING
  IN_PROGRESS
  COMPLETED
  
  @@map("todo_status")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
  
  @@map("priority")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  
  @@map("difficulty")
}